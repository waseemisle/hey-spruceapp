rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null }
    function isAdmin() {
      return exists(/databases/$(database)/documents/adminUsers/$(request.auth.uid));
    }
    function isDocOwner(doc) { return isSignedIn() && doc.data.clientId == request.auth.uid }

    // Default: deny by default
    match /{document=**} { allow read, write: if false }

    // Clients collection - admins can read/write; users can read their own doc
    match /clients/{clientId} {
      allow read: if isSignedIn() && (isAdmin() || clientId == request.auth.uid);
      allow write: if isSignedIn() && (isAdmin() || clientId == request.auth.uid);
    }

    // Subsidiaries - owner client and admins can manage
    match /subsidiaries/{subsidiaryId} {
      allow read: if isSignedIn() && (isAdmin() || resource.data.clientId == request.auth.uid);
      allow create: if isSignedIn() && (isAdmin() || request.resource.data.clientId == request.auth.uid);
      allow update, delete: if isSignedIn() && (isAdmin() || resource.data.clientId == request.auth.uid);
    }

    // Locations - require subsidiaryId and enforce ownership
    match /locations/{locationId} {
      allow read: if isSignedIn() && (isAdmin() || resource.data.clientId == request.auth.uid);
      allow create: if isSignedIn() && (
        isAdmin() || (
          request.resource.data.clientId == request.auth.uid &&
          request.resource.data.subsidiaryId is string &&
          request.resource.data.subsidiaryId.size() > 0 &&
          exists(/databases/$(database)/documents/subsidiaries/$(request.resource.data.subsidiaryId)) &&
          get(/databases/$(database)/documents/subsidiaries/$(request.resource.data.subsidiaryId)).data.clientId == request.auth.uid
        )
      );
      allow update, delete: if isSignedIn() && (isAdmin() || resource.data.clientId == request.auth.uid);
    }
  }
}
